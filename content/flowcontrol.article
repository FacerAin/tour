흐름 제어 구문: for, if, else, switch 그리고 defer
당신의 흐름을 조건문과 반복문, switch, defer로 제어하는 방법을 배우십시오.

The Go Authors
https://golang.org

* For

Go는 for 반복문이라는 단 하나의 반복 구조를 가집니다.

기본적인 for 반복문의 `;` 으로 구별되는 세 가지 구성 요소를 갖습니다.

- 초기화 구문: 첫 번째 iteration 전에 수행됩니다.

- 조건 표현: 매 모든 iteration 이전에 판별됩니다.

- 사후 구문: 매 iteration 마지막에 수행됩니다. 

초기화 구문은 주로 짧은 변수 선언일 것이며, 거기서 선언된 변수들은 for문의 스코프 내에서만 보여집니다.

반복문은 조건 판별의 boolean 값이 `false` 이면 iterating을 종료할 것 입니다.

*주의:* C나 Java, JavaScript와 같은 다른 언어들과 달리, Go는 for문의 세 가지 구성 요소를 감싸는 괄호가 없고, 
`{`}` 괄호가 항상 필수입니다.

.play flowcontrol/for.go

* 계속해서 For

초기화 구문과 사후 구문은 필수는 아닙니다.

.play flowcontrol/for-continued.go

* For 은 Go의 "while"

당신이 `;` 을 생략할 수 있다는 점에서 C의 `while` 은 Go에서 `for` 로 쓰입니다.

.play flowcontrol/for-is-gos-while.go

* 영원한 For

만약 당신이 그것이 영원한 반복문에서 반복 조건을 생략한다면, 그것을 통해 무한 루프 또한 간편히 표현될 수 있습니다.

.play flowcontrol/forever.go

* If

Go의 `if` 문은 `for` 반복문과 비슷합니다. 그 표현은 `(`)` 괄호로 둘러쌓일 필요는 없지만, `{`}` 괄호는 필수입니다.

.play flowcontrol/if.go

* 짧은 구문과의 If

`for` 과 마찬가지로, `if` 문 또한 조건문 전에 수행될 짧은 구문으로 시작될 수 있습니다.

그 짧은 구문에서 선언된 변수들은 오직 `if` 문의 끝까지만 스코페 존재합니다.

(마지막 `return` 문에서 `v` 를 사용해보십시오.)

.play flowcontrol/if-with-a-short-statement.go

* If와 else

짧은 `if` 문 안에서 선언된 변수들은 어떠한 `else` 블럭에서든 사용이 가능합니다.

`pow` 에 대한 두 가지 호출 모두 `main`의 시작 부분에서 `fmt.Println`에 대한 호출하기 이전에 그들의 결과를 return 합니다.

.play flowcontrol/if-and-else.go

* 실습: 반복문과 함수

함수와 반복문을 가지고 노는 방법으로서 제곱근 함수를 도입해봅시다: x라는 숫자가 주어졌을 때, 우리는 z²이 x에 가장 가까운 숫자 z를 찾아낼 것입니다.

컴퓨터는 주로 x의 제곱근을 반복문을 사용해 연산합니다.
어떠한 추측 값 z로부터 시작해, 우리는 z²가 x에 얼마나 가까운 가를 근거로 z의 더 좋은 값을 추정합니다.

	z -= (z*z - x) / (2*z)

이러한 조정을 반복함으로써 우리가 최대한 실제 제곱근에 가까운 정답에 도달할 때까지 추측은 점점 더 정확해집니다.

주어진 `func`Sqrt`에 이것을 도입하십시오.
입력값이 어떻든 간에 z = 1이라는 괜찮은 가정에서 시작합니다.
시작과 함께 계산을 10회 반복하고 각각의 z의 값을 출력하세요.(along the way??)
당신이 x의 다양한 값(1, 2, 3, ...)에 얼마나 가까워지는 지 그리고 얼마나 빠르게 추측이 개선되는 지 보세요.

힌트: 실수값을 선언하고 초기화하는 방법 - 값에 소수점을 입력해주거나 변환식을 사용하세요.

	z := 1.0
	z := float64(1)

Next, change the loop condition to stop once the value has stopped
changing (or only changes by a very small amount).
See if that's more or fewer than 10 iterations.
Try other initial guesses for z, like x, or x/2.
How close are your function's results to the [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] in the standard library?

(*Note:* If you are interested in the details of the algorithm, the z² − x above
is how far away z² is from where it needs to be (x), and the division by 2z is the derivative
of z², to scale how much we adjust z by how quickly z² is changing.
This general approach is called [[https://en.wikipedia.org/wiki/Newton%27s_method][Newton's method]].
It works well for many functions but especially well for square root.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

A `switch` statement is a shorter way to write a sequence of `if`-`else` statements.
It runs the first case whose value is equal to the condition expression.

Go's switch is like the one in C, C++, Java, JavaScript, and PHP,
except that Go only runs the selected case, not all the cases that follow.
In effect, the `break` statement that is needed at the end of each case in those
languages is provided automatically in Go.
Another important difference is that Go's switch cases need not
be constants, and the values involved need not be integers.

.play flowcontrol/switch.go

* Switch evaluation order

Switch cases evaluate cases from top to bottom, stopping when a case succeeds.

(For example,

	switch i {
	case 0:
	case f():
	}

does not call `f` if `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Switch with no condition

Switch without a condition is the same as `switch`true`.

This construct can be a clean way to write long if-then-else chains.

.play flowcontrol/switch-with-no-condition.go

* Defer

A defer statement defers the execution of a function until the surrounding
function returns.

The deferred call's arguments are evaluated immediately, but the function call
is not executed until the surrounding function returns.

.play flowcontrol/defer.go

* Stacking defers

Deferred function calls are pushed onto a stack. When a function returns, its
deferred calls are executed in last-in-first-out order.

To learn more about defer statements read this
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
