더 많은 타입들: struct와 slice, map
존재하는 타입을 기반으로 타입들을 정의하는 방법을 배워보십시오: 이번 강의는 struct와 array, slice, map을 다룹니다.

The Go Authors
https://golang.org

* Pointers (포인터)

Go는 포인터를 지원합니다.
포인터는 값의 메모리 주소를 가지고 있습니다.

`*T` 타입은 `T` 값을 가리키는 포인터입니다. 이것의 zero value는 `nil` 입니다.

	var p *int

`&` 연산자는 이것의 피연산자에 대한 포인터를 생성합니다.

	i := 42
	p = &i

`*` 연산자는 포인터가 가리키는 주소의 값을 나타냅니다.

	fmt.Println(*p) // 포인터 p를 통해 i 읽기
	*p = 21         // 포인터 p를 통해 i 설정

이것은 "역 참조" 또는 "간접 참조"로 알려져 있습니다.

C언어와는 다르게, Go는 포인터 산술을 지원하지 않습니다.

.play moretypes/pointers.go

* Structs (구조체)

구조체는 필드의 집합체입니다.

.play moretypes/structs.go

* Struct Fields

구조체의 필드는 .(dot)으로 접근할 수 있습니다.

.play moretypes/struct-fields.go

* Pointers to structs

구조체 포인터를 통해서 구조체 필드를 접근할 수 있습니다.

`(*p).X`로 작성하면, 구조체 포인터 `p` 에서 구조체의 `X` 필드에 접근할 수 있습니다.

그러나 위 표기법은 번거로울 수 있습니다. 따라서 이 언어는 역 참조를 명시할 필요 없이 `p.X`로 작성할 수 있습니다.

.play moretypes/struct-pointers.go

* Struct Literals

구조체 리터럴은 필드 값을 나열하여 새로 할당된 구조체 값을 나타냅니다.

 `Name:` 구문으로 필드의 하위 집합만 나열할 수 있습니다. (명명된 필드의 순서는 무관합니다.)

특별한 접두사 `&`은 구조체 값으로 포인터를 반환합니다. 

.play moretypes/struct-literals.go


* Arrays (배열)

`[n]T` 타입은 타입이 T인 n 값들의 배열입니다. 

	var a [10]int

위 표현은 변수 a를 10개의 정수들의 배열로 선언한 것입니다.

배열의 길이는 그 타입의 일부입니다. 따라서 배열의 크기를 조정할 수 없습니다.
제약이 많을 것 같지만, 걱정하지 마세요!
Go는 배열로 작업할 수 있는 편리한 방법을 제공합니다.

.play moretypes/array.go


* Slices (슬라이스)

배열은 고정된 크기를 가지고 있습니다.
반면에, 슬라이스는 배열의 요소들을 동적인 크기로, 유연하게 볼 수 있습니다. 
실제로, 슬라이스는 배열보다 훨씬 흔합니다.

`[]T` 타입은 `T` 타입을 원소로 가지는 슬라이스입니다.

슬라이스는 콜론으로 구분된 두 개의 인덱스(하한과 상한)를 지정하여 형성됩니다. 

	a[low : high]


이것은 첫 번째 요소를 포함하지만 마지막 요소를 제외하는 범위를 선택합니다.


아래 표현은 a의 첫번째부터 세번째 요소를 
포함하는 슬라이스를 생성합니다. 


	a[1:4]

.play moretypes/slices.go


* Slices are like references to arrays (배열을 참조하는 슬라이스)

슬라이스는 어떤 데이터도 저장할 수 없습니다.
이것은 단지 기본 배열의 한 영역을 나타낼 뿐입니다.

슬라이스의 요소를 변경하면 기본 배열의 해당 요소가 수정됩니다.

동일한 기본 배열을 공유하는 다른 슬라이스는 이러한 변경사항을 볼 수 있습니다.

.play moretypes/slices-pointers.go


* Slice literals (슬라이스 리터럴)

슬라이스 리터럴은 길이가 없는 배열 리터럴와 같습니다.


아래는 배열 리터럴입니다.

	[3]bool{true, true, false}

이렇게 하면 위와 동일한 배열이 생성되고,
이를 참조하는 슬라이스가 만들어집니다.

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults (슬라이스 기본 값)

상한 또는 하한을 생략하면, 슬라이싱할 때 기본 값을 사용할 수 있습니다.
하한의 경우 기본 값은 0이고, 상한의 경우 슬라이스의 길이입니다.


	var a [10]int

위 배열에서 아래 슬라이스 표현식들은
전부 동일한 의미입니다.

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity (슬라이스의 길이와 용량)

슬라이스는 _length(길이)_와 _capacity(용량)_를 둘다 가지고 있습니다. 

슬라이스의 길이란 슬라이스가 포함하는 요소의 개수입니다.

슬라이스의 용량이란 슬라이스의 첫 번째 요소부터 계산하는 
기본 배열의 요소의 개수입니다. 

슬라이스 `s`의 길이와 용량은 `len(s)`와 `cap(s)` 식으로 얻을 수 있습니다.

슬라이스의 길이를 연장하기 위해서는 슬라이스에 충분한 용량이 있을 때, 
다시 슬라이싱을 하면 됩니다.  
예제의 슬라이스 작업중 하나를 슬라이스의 용량을 넘어가도록 변경하여
어떤 일이 발생하는지 확인해 보세요.   


.play moretypes/slice-len-cap.go


* Nil slices (nil 슬라이스)

슬라이스의 zero value는 `nil` 입니다.

nil 슬라이스의 길이와 용량은 0이며, 기본 배열을 가지고 있지 않습니다.

.play moretypes/nil-slices.go


* Creating a slice with make (make 함수로 슬라이스 만들기)

슬라이스는 내장된 `make` 함수로 생성할 수 있습니다.
이것은 동적 크기의 배열을 생성하는 방법입니다.

`make` 함수는 0으로 이루어진 배열을 할당합니다.
그리고 해당 배열을 참조하는 슬라이스를 반환합니다.

	a := make([]int, 5)  // len(a)=5

용량을 지정하려면, `make` 함수의 세 번째 인자에 값을 전달하면 됩니다.

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices of slices (슬라이스의 슬라이스)

슬라이스는 다른 슬라이스를 포함하여 모든 타입을 담을 수 있습니다. 

.play moretypes/slices-of-slice.go


* Appending to a slice (슬라이스에 요소 추가하기)

슬라이스에 새로운 요소를 추가하는 것이 일반적입니다.
따라서 Go는 내장된 `append` 함수를 제공합니다.
[[https://golang.org/pkg/builtin/#append][문서]]에 `append` 내장 함수의 설명이 있습니다.

	func append(s []T, vs ...T) []T

`append`의 첫번째 파라미터 `s`는 슬라이스의 타입 `T`입니다.
그리고 나머지 `T` 값들은 슬라이스에 추가할 값들입니다.

`append`의 결과 값은 원래 슬라이스의 모든 요소와 
추가로 제공된 값들을 포함하는 슬라이스입니다.

만약 `s`의 원래 배열이 너무 작아서 주어진 값을 모두 추가할 수 없을 경우,
더 큰 배열이 할당됩니다. 이 때 반환된 슬라이스는 새로 할당된 배열을 가리킵니다.

(To learn more about slices, read the [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]] article.)

.play moretypes/append.go


* Range

The `range` form of the `for` loop iterates over a slice or map.

When ranging over a slice, two values are returned for each iteration.
The first is the index, and the second is a copy of the element at that index.

.play moretypes/range.go

* Range continued

You can skip the index or value by assigning to `_`.

    for i, _ := range pow
    for _, value := range pow

If you only want the index, you can omit the second variable.

    for i := range pow

.play moretypes/range-continued.go

* Exercise: Slices

Implement `Pic`. It should return a slice of length `dy`, each element of which is a slice of `dx` 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values.

The choice of image is up to you. Interesting functions include `(x+y)/2`, `x*y`, and `x^y`.

(You need to use a loop to allocate each `[]uint8` inside the `[][]uint8`.)

(Use `uint8(intValue)` to convert between types.)

.play moretypes/exercise-slices.go

* Maps

A map maps keys to values.

The zero value of a map is `nil`.
A `nil` map has no keys, nor can keys be added.

The `make` function returns a map of the given type,
initialized and ready for use.

.play moretypes/maps.go

* Map literals

Map literals are like struct literals, but the keys are required.

.play moretypes/map-literals.go

* Map literals continued

If the top-level type is just a type name, you can omit it from the elements of the literal.

.play moretypes/map-literals-continued.go

* Mutating Maps

Insert or update an element in map `m`:

	m[key] = elem

Retrieve an element:

	elem = m[key]

Delete an element:

	delete(m, key)

Test that a key is present with a two-value assignment:

	elem, ok = m[key]

If `key` is in `m`, `ok` is `true`. If not, `ok` is `false`.

If `key` is not in the map, then `elem` is the zero value for the map's element type.

*Note:* If `elem` or `ok` have not yet been declared you could use a short declaration form:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercise: Maps

Implement `WordCount`.  It should return a map of the counts of each âwordâ in the string `s`. The `wc.Test` function runs a test suite against the provided function and prints success or failure.

You might find [[https://golang.org/pkg/strings/#Fields][strings.Fields]] helpful.

.play moretypes/exercise-maps.go

* Function values

Functions are values too. They can be passed around just like other values.

Function values may be used as function arguments and return values.

.play moretypes/function-values.go

* Function closures

Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is "bound" to the variables.

For example, the `adder` function returns a closure. Each closure is bound to its own `sum` variable.

.play moretypes/function-closures.go

* Exercise: Fibonacci closure

Let's have some fun with functions.

Implement a `fibonacci` function that returns a function (a closure) that
returns successive [[https://en.wikipedia.org/wiki/Fibonacci_number][fibonacci numbers]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
